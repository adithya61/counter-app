[{"/Users/zonic/counter-app/src/index.js":"1","/Users/zonic/counter-app/src/App.js":"2","/Users/zonic/counter-app/src/reportWebVitals.js":"3","/Users/zonic/counter-app/src/components/counter.jsx":"4","/Users/zonic/counter-app/src/components/counters.jsx":"5"},{"size":555,"mtime":1644731681188,"results":"6","hashOfConfig":"7"},{"size":529,"mtime":1644477138724,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1644474801481,"results":"9","hashOfConfig":"7"},{"size":1407,"mtime":1644755557353,"results":"10","hashOfConfig":"7"},{"size":469,"mtime":1644755662199,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"16"},"1qj9mw",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/zonic/counter-app/src/index.js",["31"],[],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Counters from './components/counters';\n\nReactDOM.render(\n    <Counters />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["32","33"],"/Users/zonic/counter-app/src/App.js",[],[],["34","35"],"/Users/zonic/counter-app/src/reportWebVitals.js",[],[],"/Users/zonic/counter-app/src/components/counter.jsx",["36"],[],"import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass Counter extends Component {\n  // state: stores important values of the component.\n  state = {\n    count: this.props.value,\n    tags: [\"tag1\", \"tag2\", \"tag3\"],\n  };\n\n  /* Event Handler: use arrow function for handling event handlers as it inherits context from parent\n   and hence count variable is accessible. */\n  handleIncrement = () => {\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  render() {\n    // every component has a prop property that contains the attributes set on the component\n    console.log(\"props \", this.props);\n\n    return (\n      <div>\n        {/* dynamically rendering className */}\n        <span className={this.getBadgeColor()}>{this.formatCount()}</span>\n\n        <button\n          onClick={this.handleIncrement}\n          className=\"btn btn-secondary btn-sm\"\n        >\n          Increment\n        </button>\n      </div>\n    );\n  }\n\n  // get badge color corresponding to the count property in state object\n  getBadgeColor() {\n    let badgeColor = \"badge m-2 bg-\";\n    badgeColor += this.state.count == 0 ? \"warning\" : \"primary\";\n    return badgeColor;\n  }\n\n  //  display string literal zero or the count based on the object state in the component.\n  formatCount() {\n    const { count } = this.state;\n\n    return count === 0 ? \"Zero\" : count;\n  }\n}\n\nexport default Counter;\n","/Users/zonic/counter-app/src/components/counters.jsx",[],[],{"ruleId":"37","severity":1,"message":"38","line":4,"column":8,"nodeType":"39","messageId":"40","endLine":4,"endColumn":11},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"41","replacedBy":"45"},{"ruleId":"43","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":39,"column":36,"nodeType":"49","messageId":"50","endLine":39,"endColumn":38},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["51"],"no-negated-in-lhs",["52"],["51"],["52"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]