[{"/Users/zonic/counter-app/src/index.js":"1","/Users/zonic/counter-app/src/App.js":"2","/Users/zonic/counter-app/src/reportWebVitals.js":"3","/Users/zonic/counter-app/src/components/counter.jsx":"4"},{"size":552,"mtime":1644592061088,"results":"5","hashOfConfig":"6"},{"size":529,"mtime":1644477138724,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1644474801481,"results":"8","hashOfConfig":"6"},{"size":1222,"mtime":1644599165736,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"14"},"1qj9mw",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/zonic/counter-app/src/index.js",["25"],[],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Counter from './components/counter';\n\nReactDOM.render(\n    <Counter />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["26","27"],"/Users/zonic/counter-app/src/App.js",[],[],"/Users/zonic/counter-app/src/reportWebVitals.js",[],[],"/Users/zonic/counter-app/src/components/counter.jsx",["28"],[],"import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass Counter extends Component {\n  // state: stores important values of the component.\n  state = {\n    count: 0,\n    tags: [\"tag1\", \"tag2\", \"tag3\"],\n  };\n\n  // Event Handler: use arrow function for handling event handlers as it inherits context from parent\n  // and hence count variable is accessible.\n  handleIncrement = () => {\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  render() {\n    return (\n      <div>\n        {/* dynamically rendering className */}\n        <span className={this.getBadgeColor()}>{this.formatCount()}</span>\n\n        <button onClick={this.handleIncrement} className=\"btn btn-secondary\">\n          Increment\n        </button>\n      </div>\n    );\n  }\n\n  // get badge color corresponding to the count property in state object\n  getBadgeColor() {\n    let badgeColor = \"badge m-2 bg-\";\n    badgeColor += this.state.count == 0 ? \"warning\" : \"primary\";\n    return badgeColor;\n  }\n\n  //  display string literal zero or the count based on the object state in the component.\n  formatCount() {\n    const { count } = this.state;\n\n    return count === 0 ? \"Zero\" : count;\n  }\n}\n\nexport default Counter;\n",{"ruleId":"29","severity":1,"message":"30","line":4,"column":8,"nodeType":"31","messageId":"32","endLine":4,"endColumn":11},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":33,"column":36,"nodeType":"39","messageId":"40","endLine":33,"endColumn":38},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["41"],"no-negated-in-lhs",["42"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]