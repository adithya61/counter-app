{"ast":null,"code":"var _jsxFileName = \"/Users/zonic/counter-app/src/components/counter.jsx\";\nimport React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Counter extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      count: 0,\n      tags: [\"tag1\", \"tag2\", \"tag3\"]\n    };\n  }\n\n  render() {\n    let badgeColor = this.getBadgeColor();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: this.getBadgeColor(),\n        children: this.formatCount()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.state.tags.map(tag => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: tag\n        }, tag, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this);\n  } // get badge color corresponding to the count in s\n\n\n  getBadgeColor() {\n    let badgeColor = \"badge m-2 bg-\";\n    badgeColor += this.state.count == 0 ? \"warning\" : \"primary\";\n    return badgeColor;\n  }\n\n  formatCount() {\n    const {\n      count\n    } = this.state;\n    return count === 0 ? \"Zero\" : count;\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/Users/zonic/counter-app/src/components/counter.jsx"],"names":["React","Component","Counter","state","count","tags","render","badgeColor","getBadgeColor","formatCount","map","tag"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,sCAAP;;;AAEA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAG9BE,KAH8B,GAGtB;AACNC,MAAAA,KAAK,EAAE,CADD;AAENC,MAAAA,IAAI,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB;AAFA,KAHsB;AAAA;;AAQ9BC,EAAAA,MAAM,GAAG;AACP,QAAIC,UAAU,GAAG,KAAKC,aAAL,EAAjB;AAEA,wBACE;AAAA,8BAEE;AAAM,QAAA,SAAS,EAAE,KAAKA,aAAL,EAAjB;AAAA,kBAAwC,KAAKC,WAAL;AAAxC;AAAA;AAAA;AAAA;AAAA,cAFF,eAIE;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAOE;AAAA,kBACG,KAAKN,KAAL,CAAWE,IAAX,CAAgBK,GAAhB,CAAqBC,GAAD,iBACnB;AAAA,oBAAeA;AAAf,WAASA,GAAT;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeD,GA1B6B,CA4B9B;;;AACAH,EAAAA,aAAa,GAAG;AACd,QAAID,UAAU,GAAG,eAAjB;AACAA,IAAAA,UAAU,IAAI,KAAKJ,KAAL,CAAWC,KAAX,IAAoB,CAApB,GAAwB,SAAxB,GAAoC,SAAlD;AACA,WAAOG,UAAP;AACD;;AAEDE,EAAAA,WAAW,GAAG;AACZ,UAAM;AAAEL,MAAAA;AAAF,QAAY,KAAKD,KAAvB;AAEA,WAAOC,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B;AACD;;AAvC6B;;AA0ChC,eAAeF,OAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass Counter extends Component {\n\n  // stores important values of the component.\n  state = {\n    count: 0,\n    tags: [\"tag1\", \"tag2\", \"tag3\"],\n  };\n\n  render() {\n    let badgeColor = this.getBadgeColor();\n\n    return (\n      <div>\n        {/* dynamically rendering className */}\n        <span className={this.getBadgeColor()}>{this.formatCount()}</span>\n\n        <button className=\"btn btn-secondary\">Increment</button>\n        \n        {/* dynamically rendering lists */}\n        <ul>\n          {this.state.tags.map((tag) => (\n            <li key={tag}>{tag}</li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n\n  // get badge color corresponding to the count in s\n  getBadgeColor() {\n    let badgeColor = \"badge m-2 bg-\";\n    badgeColor += this.state.count == 0 ? \"warning\" : \"primary\";\n    return badgeColor;\n  }\n\n  formatCount() {\n    const { count } = this.state;\n\n    return count === 0 ? \"Zero\" : count;\n  }\n}\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}