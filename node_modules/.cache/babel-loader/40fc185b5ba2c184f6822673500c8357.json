{"ast":null,"code":"var _jsxFileName = \"/Users/zonic/counter-app/src/components/counter.jsx\";\nimport React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ncout;\n\nclass Counter extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      count: 0,\n      tags: [\"tag1\", \"tag2\", \"tag3\"]\n    };\n\n    this.handleIncrement = () => {\n      this.setState({\n        count: this.state.count + 1\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: this.getBadgeColor(),\n        children: this.formatCount()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleIncrement,\n        className: \"btn btn-secondary\",\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this);\n  } // get badge color corresponding to the count property in state object\n\n\n  getBadgeColor() {\n    let badgeColor = \"badge m-2 bg-\";\n    badgeColor += this.state.count == 0 ? \"warning\" : \"primary\";\n    return badgeColor;\n  } //  display string literal zero or the count based on the object state in the component.\n\n\n  formatCount() {\n    const {\n      count\n    } = this.state;\n    return count === 0 ? \"Zero\" : count;\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/Users/zonic/counter-app/src/components/counter.jsx"],"names":["React","Component","cout","Counter","state","count","tags","handleIncrement","setState","render","getBadgeColor","formatCount","badgeColor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,sCAAP;;AACAC,IAAI;;AAEJ,MAAMC,OAAN,SAAsBF,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAE9BG,KAF8B,GAEtB;AACNC,MAAAA,KAAK,EAAE,CADD;AAENC,MAAAA,IAAI,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB;AAFA,KAFsB;;AAAA,SAO9BC,eAP8B,GAOZ,MAAM;AACtB,WAAKC,QAAL,CAAc;AAAEH,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAmB;AAA5B,OAAd;AACD,KAT6B;AAAA;;AAW9BI,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BAEE;AAAM,QAAA,SAAS,EAAE,KAAKC,aAAL,EAAjB;AAAA,kBAAwC,KAAKC,WAAL;AAAxC;AAAA;AAAA;AAAA;AAAA,cAFF,eAIE;AAAQ,QAAA,OAAO,EAAE,KAAKJ,eAAtB;AAAuC,QAAA,SAAS,EAAC,mBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAUD,GAtB6B,CAwB9B;;;AACAG,EAAAA,aAAa,GAAG;AACd,QAAIE,UAAU,GAAG,eAAjB;AACAA,IAAAA,UAAU,IAAI,KAAKR,KAAL,CAAWC,KAAX,IAAoB,CAApB,GAAwB,SAAxB,GAAoC,SAAlD;AACA,WAAOO,UAAP;AACD,GA7B6B,CA+B9B;;;AACAD,EAAAA,WAAW,GAAG;AACZ,UAAM;AAAEN,MAAAA;AAAF,QAAY,KAAKD,KAAvB;AAEA,WAAOC,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B;AACD;;AApC6B;;AAuChC,eAAeF,OAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\ncout\n\nclass Counter extends Component {\n  // stores important values of the component.\n  state = {\n    count: 0,\n    tags: [\"tag1\", \"tag2\", \"tag3\"],\n  };\n\n  handleIncrement = () => {\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  render() {\n    return (\n      <div>\n        {/* dynamically rendering className */}\n        <span className={this.getBadgeColor()}>{this.formatCount()}</span>\n\n        <button onClick={this.handleIncrement} className=\"btn btn-secondary\">\n          Increment\n        </button>\n      </div>\n    );\n  }\n\n  // get badge color corresponding to the count property in state object\n  getBadgeColor() {\n    let badgeColor = \"badge m-2 bg-\";\n    badgeColor += this.state.count == 0 ? \"warning\" : \"primary\";\n    return badgeColor;\n  }\n\n  //  display string literal zero or the count based on the object state in the component.\n  formatCount() {\n    const { count } = this.state;\n\n    return count === 0 ? \"Zero\" : count;\n  }\n}\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}